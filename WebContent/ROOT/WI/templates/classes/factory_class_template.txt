package <#layerName>;

import utilsLib.util.*;
import utilsLib.util.data.*;
import java.util.Date;

public class <#bigEntityName>Factory implements ObjFactory {
    public final static int <#mnemonic> = 0;
    private static Entity <#entityName>Entity;
    public final static String <#entityName>_ENTITY_NAME = "<#realName>";

<#fields>
    public final static Field <#entityBigName>_<#nameBig>_ID_FIELD = new Field(
            "<#realName>", "<#name>", "", <#realType>);<#/fields>

    static {
		<#entityName>Entity = new DefaultEntity(<#entityName>_ENTITY_NAME,
					 <#mnemonic> + "",
					 "<#keyFieldRealName>");

		<#fields><#entityName>Entity.addField(<#entityBigName>_<#nameBig>_ID_FIELD);
		<#/fields>
	}




	public Entity getClassEntity(int classID) {
		switch (classID) {
			case <#mnemonic>:
				return <#entityName>Entity;
			default:
				throw new IllegalArgumentException("Identificador de " +
				"classe inválido.");
		}
	}

	public Entity getEntity(Object obj) {
		if (obj == null) {
			throw new IllegalArgumentException();
		}

		if (obj instanceof <#bigEntityName>) {
			<#bigEntityName> <#entityName> = (<#bigEntityName>) obj;

			Entity e = (Entity) getClassEntity(<#mnemonic>).clone();
			<#fields>e.getField(<#entityBigName>_<#nameBig>_ID_FIELD).setValue(<#entityName>.get<#bigName>());
			<#/fields>
			return e;
		} else {
			throw new IllegalArgumentException("O objeto deve ser algum do " + 
				"módulo category.");
		}
	}

    public Object paramDataToObj(ParamDataInput pdi) {
        int classID = Utils.parseInt(pdi.getExtra());

        switch (classID) {
            case <#mnemonic>: {
                return new <#bigEntityName>(
					<#fields>pdi.<#paramGetter>(<#entityBigName>_<#nameBig>_ID_FIELD.getName()),
					<#/fields>
		);
            }

            default:
                throw new IllegalArgumentException("Identific<#entityName>or de " +
                        "classe inválido.");
        }
    }

    public Object[] getArray(int classID, int size) {
        switch (classID) {
            case <#mnemonic>:
                return new <#bigEntityName>[size];
            default:
                throw new IllegalArgumentException("Param: classID");
        }
    }
}
